<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:http="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- La propiedad location de Spring indica que la configuracion de un bean esta en un archivo
        externo al archivo de configuracion de Spring. -->
        <property name="location">
            <value>classpath:config.properties</value>
        </property>
    </bean>

    <!-- beans para las clases DAO. -->
    <bean id="clienteDAO" class="paradigmas.tpFinal.dao.cliente.ClienteDAO"/>
    <bean id="turnoDAO" class="paradigmas.tpFinal.dao.turno.TurnoDAO"/>

    <!-- bean con todas las propiedades que tienen que ver con la conexion a la base.
         Tiene propiedades sobre la ubicacion de la base, el driver a usar y propiedades de c3p0. -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="true" destroy-method="close">
        <property name="driverClass" value="${paradigmas.tpFinal.persistence.jdbc.driver}"/>
        <property name="jdbcUrl" value="${paradigmas.tpFinal.persistence.jdbc.url}"/>
        <property name="user" value="${paradigmas.tpFinal.persistence.user}"/>
        <property name="password" value="${paradigmas.tpFinal.persistence.password}"/>

        <property name="minPoolSize" value="${paradigmas.tpFinal.persistence.c3p0.minPoolSize}"/>
        <property name="unreturnedConnectionTimeout" value="${paradigmas.tpFinal.persistence.c3p0.unreturnedConnectionTimeout}"/>
        <property name="debugUnreturnedConnectionStackTraces" value="${paradigmas.tpFinal.persistence.c3p0.debugUnreturnedConnectionStackTraces}"/>
        <property name="checkoutTimeout" value="${paradigmas.tpFinal.persistence.c3p0.checkoutTimeout}"/>
        <property name="maxStatements" value="${paradigmas.tpFinal.persistence.c3p0.maxStatements}"/>
        <property name="idleConnectionTestPeriod" value="${paradigmas.tpFinal.persistence.c3p0.idleConnectionTestPeriod}"/>
        <property name="preferredTestQuery" value="${paradigmas.tpFinal.persistence.c3p0.preferedTestQuery}"/>
        <property name="testConnectionOnCheckout" value="${paradigmas.tpFianl.persistence.c3p0.testConnectionOnCheckout}"/>
        <property name="acquireRetryAttempts" value="${paradigmas.tpFinal.persistence.c3p0.acquireRetryAttempts}"/>
        <property name="breakAfterAcquireFailure" value="${paradigmas.tpFinal.persistence.c3p0.breakAfterAcquireFailure}"/>
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="paradigmas-tpFinal-persistence-unit"/>
        <!-- Esta propiedad indica el nombre de los paquetes en los que hibernate tiene que buscar entidades
        pera mapear -->
        <property name="packagesToScan" value="paradigmas.tpFinal.model"/>
        <!-- Los datos de la propiedad dataSourse estan referenciados al bean dataSource de mas arriba -->
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceProviderClass" value="org.hibernate.jpa.HibernatePersistenceProvider"/>

        <!-- Contiene todas las configuraciones relacionadas con hibernate -->
        <property name="jpaProperties">
            <!-- props es una coleccion de valores "prop" dentro de una propiedad. -->
            <props>
                <prop key="hibernate.hbm2ddl.auto">${paradigmas.tpFinal.persistence.hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${paradigmas.tpFinal.persistence.hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${paradigmas.tpFinal.persistence.hibernate.show_sql}</prop>
                <prop key="hibernate.default.batch.size">${paradigmas.tpFinal.persistence.hibernate.default.batch.size}</prop>
                <prop key="hibernate.max.fetch.depth">${paradigmas.tpFinal.persistence.hibernate.max.fetch.depth}</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributeSource">
            <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
        </property>
    </bean>

    <bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <constructor-arg ref="transactionInterceptor"/>
    </bean>

    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>